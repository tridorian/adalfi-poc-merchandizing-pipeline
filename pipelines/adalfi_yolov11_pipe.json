{
  "components": {
    "comp-condition-1": {
      "dag": {
        "tasks": {
          "deploy": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-deploy"
            },
            "inputs": {
              "artifacts": {
                "saved_folder": {
                  "componentInputArtifact": "pipelinechannel--load-and-train-saved_folder"
                }
              },
              "parameters": {
                "image_path": {
                  "runtimeValue": {
                    "constant": "us-central1-docker.pkg.dev/adalfi-ai-poc-merchandizing/prediction-container/fastapi:latest"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "deploy"
            }
          }
        }
      },
      "inputDefinitions": {
        "artifacts": {
          "pipelinechannel--load-and-train-saved_folder": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "pipelinechannel--evaluate-deploy": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-deploy": {
      "executorLabel": "exec-deploy",
      "inputDefinitions": {
        "artifacts": {
          "saved_folder": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "accelerator_count": {
            "defaultValue": 1.0,
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "accelerator_type": {
            "defaultValue": "NVIDIA_TESLA_T4",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "image_path": {
            "parameterType": "STRING"
          },
          "machine_type": {
            "defaultValue": "n1-standard-2",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "max_replica_count": {
            "defaultValue": 2.0,
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "min_replica_count": {
            "defaultValue": 1.0,
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "project": {
            "defaultValue": "adalfi-ai-poc-merchandizing",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "region": {
            "defaultValue": "us-central1",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-evaluate": {
      "executorLabel": "exec-evaluate",
      "inputDefinitions": {
        "artifacts": {
          "saved_models_gcs_folder": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "base_output_directory": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "dataset_path": {
            "parameterType": "STRING"
          },
          "display_name": {
            "defaultValue": "evaluate",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "enable_web_access": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "encryption_spec_key_name": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "gcs_data_folder": {
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "{{$.pipeline_google_cloud_location}}",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "network": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "persistent_resource_id": {
            "defaultValue": "{{$.pipeline_persistent_resource_id}}",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "reserved_ip_ranges": {
            "defaultValue": [],
            "isOptional": true,
            "parameterType": "LIST"
          },
          "restart_job_on_worker_restart": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "service_account": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "strategy": {
            "defaultValue": "STANDARD",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "tensorboard": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "timeout": {
            "defaultValue": "604800s",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "worker_pool_specs": {
            "defaultValue": [
              {
                "container_spec": {
                  "args": [
                    "--executor_input",
                    "{{$.json_escape[1]}}",
                    "--function_to_execute",
                    "evaluate"
                  ],
                  "command": [
                    "sh",
                    "-c",
                    "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
                    "sh",
                    "-ec",
                    "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
                    "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef evaluate(\n    dataset_path: str,\n    gcs_data_folder: str,\n    saved_models_gcs_folder: Input[Model],\n    map50: Output[Metrics],\n    map50_95: Output[Metrics],\n    precision: Output[Metrics],\n    recall: Output[Metrics],\n    fitness: Output[Metrics],\n    deploy: OutputPath(str),\n):\n    from ultralytics import YOLO\n    from google.cloud import storage\n    import os\n    import torch\n\n    print(f\"CUDA available: {torch.cuda.is_available()}\")\n\n    # os.system(f\"gcloud storage cp -r {GCS_DATA_FOLDER} ./{DATASET_PATH}\")\n    # load the model weights\n    storage_client = storage.Client()\n    path = saved_models_gcs_folder.path + \"/train/weights/best.pt\"\n    # path = saved_models_gcs_folder.path + \"/train/weights/best.engine\"\n    bucket = storage_client.get_bucket(path.split(\"/\")[2])\n    blobs = list(bucket.list_blobs(prefix=\"/\".join(path.split(\"/\")[3:])))\n\n    for blob in blobs:\n        filename = blob.name.split(\"/\")[-1]\n        try:\n            blob.download_to_filename(f\"{filename}\")\n        except Exception as e:\n            print(f\"error at: {e}\")\n            continue\n\n    # load val datasets\n    path = gcs_data_folder\n    bucket = storage_client.get_bucket(path.split(\"/\")[2])\n    blobs = list(bucket.list_blobs(prefix=\"/\".join(path.split(\"/\")[3:])))\n\n    for blob in blobs:\n        dirname = \"/\".join(os.path.dirname(blob.name).split(\"/\")[1:])\n        if dirname.split(\"/\")[0] == \"train\":\n            continue\n        os.makedirs(f\"{dataset_path}/{dirname}\", exist_ok=True)\n        filename = blob.name.split(\"/\")[-1]\n        try:\n            blob.download_to_filename(f\"{dataset_path}/{dirname}/{filename}\")\n        except Exception as e:\n            continue\n\n    model = YOLO(\"best.pt\")\n    # model = YOLO(\"best.engine\", task=\"detect\")\n\n    validation_results = model.val(\n        project=f\"{saved_models_gcs_folder}/val\",\n        device=\"0\",\n        data=f\"{dataset_path}/detection.data.yaml\",\n    )\n    results_dict = validation_results.results_dict\n\n    map50_result = results_dict[\"metrics/mAP50(B)\"]\n    map50_95_result = results_dict[\"metrics/mAP50-95(B)\"]\n\n    map50.log_metric(\n        \"mAP50\",\n        map50_result,\n    )\n    map50_95.log_metric(\n        \"mAP50-95\",\n        map50_95_result,\n    )\n    precision.log_metric(\n        \"precision\",\n        results_dict[\"metrics/precision(B)\"],\n    )\n    recall.log_metric(\n        \"recall\",\n        results_dict[\"metrics/recall(B)\"],\n    )\n    fitness.log_metric(\n        \"fitness\",\n        results_dict[\"fitness\"],\n    )\n    if map50_result > 0.85 and map50_95_result > 0.5:\n        with open(deploy, \"w\") as output_file:\n            output_file.write(\"true\")\n    else:\n        with open(deploy, \"w\") as output_file:\n            output_file.write(\"false\")\n\n"
                  ],
                  "env": [],
                  "image_uri": "us-central1-docker.pkg.dev/adalfi-ai-poc-merchandizing/component-container/libs:latest"
                },
                "disk_spec": {
                  "boot_disk_size_gb": 100.0,
                  "boot_disk_type": "pd-ssd"
                },
                "machine_spec": {
                  "accelerator_count": 1.0,
                  "accelerator_type": "NVIDIA_TESLA_T4",
                  "machine_type": "n1-standard-4"
                },
                "replica_count": 1.0
              }
            ],
            "isOptional": true,
            "parameterType": "LIST"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "fitness": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "map50": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "map50_95": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "precision": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "recall": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "deploy": {
            "parameterType": "STRING"
          },
          "gcp_resources": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-load-and-train": {
      "executorLabel": "exec-load-and-train",
      "inputDefinitions": {
        "parameters": {
          "base_output_directory": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "dataset_path": {
            "parameterType": "STRING"
          },
          "display_name": {
            "defaultValue": "load_and_train",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "enable_web_access": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "encryption_spec_key_name": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "epochs": {
            "parameterType": "NUMBER_INTEGER"
          },
          "gcs_data_folder": {
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "{{$.pipeline_google_cloud_location}}",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_bucket": {
            "parameterType": "STRING"
          },
          "model_version": {
            "parameterType": "STRING"
          },
          "network": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "persistent_resource_id": {
            "defaultValue": "{{$.pipeline_persistent_resource_id}}",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "reserved_ip_ranges": {
            "defaultValue": [],
            "isOptional": true,
            "parameterType": "LIST"
          },
          "restart_job_on_worker_restart": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "saved_path": {
            "parameterType": "STRING"
          },
          "service_account": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "strategy": {
            "defaultValue": "STANDARD",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "tensorboard": {
            "defaultValue": "",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "timeout": {
            "defaultValue": "604800s",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "worker_pool_specs": {
            "defaultValue": [
              {
                "container_spec": {
                  "args": [
                    "--executor_input",
                    "{{$.json_escape[1]}}",
                    "--function_to_execute",
                    "load_and_train"
                  ],
                  "command": [
                    "sh",
                    "-c",
                    "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' && \"$0\" \"$@\"\n",
                    "sh",
                    "-ec",
                    "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
                    "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef load_and_train(\n    gcs_data_folder: str,\n    dataset_path: str,\n    model_version: str,\n    model_bucket: str,\n    saved_path: str,\n    epochs: int,\n    saved_folder: Output[Model],\n):\n    from ultralytics import YOLO\n    import os\n    from google.cloud import storage\n\n    # os.system(f\"gcloud storage cp -r {GCS_DATA_FOLDER} ./{DATASET_PATH}\")\n    storage_client = storage.Client()\n    path = gcs_data_folder\n    bucket = storage_client.get_bucket(path.split(\"/\")[2])\n    blobs = list(bucket.list_blobs(prefix=\"/\".join(path.split(\"/\")[3:])))\n\n    for blob in blobs:\n        dirname = \"/\".join(os.path.dirname(blob.name).split(\"/\")[1:])\n        os.makedirs(f\"{dataset_path}/{dirname}\", exist_ok=True)\n        filename = blob.name.split(\"/\")[-1]\n        try:\n            blob.download_to_filename(f\"{dataset_path}/{dirname}/{filename}\")\n        except Exception as e:\n            continue\n    model = YOLO(model_version)  # load a pretrained model (recommended for training)\n\n    train_out = os.path.dirname(os.path.dirname(saved_folder.path)) + f\"/{saved_path}\"\n    os.makedirs(train_out, exist_ok=True)\n\n    saved_folder.path = train_out\n    # Train the model\n    model.train(\n        data=f\"{dataset_path}/detection.data.yaml\",\n        epochs=epochs,  # default\n        batch=16,\n        imgsz=640,  # default\n        device=0,\n        project=train_out,\n        exist_ok=True,\n        patience=50,\n    )\n    model.export(\n        format=\"engine\",\n        device=\"0\",\n        int8=True,\n        data=f\"{dataset_path}/detection.data.yaml\",\n    )\n    # /home/ohh/workspace/runs/detect/train/weights/best.pt\n    # with open(saved_folder, \"w\") as output_file:\n    #     output_file.write(f\"{saved_models_gcs_folder}\")\n\n"
                  ],
                  "env": [],
                  "image_uri": "us-central1-docker.pkg.dev/adalfi-ai-poc-merchandizing/component-container/libs:latest"
                },
                "disk_spec": {
                  "boot_disk_size_gb": 100.0,
                  "boot_disk_type": "pd-ssd"
                },
                "machine_spec": {
                  "accelerator_count": 1.0,
                  "accelerator_type": "NVIDIA_TESLA_T4",
                  "machine_type": "n1-standard-4"
                },
                "replica_count": 1.0
              }
            ],
            "isOptional": true,
            "parameterType": "LIST"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "saved_folder": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "gcp_resources": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-deploy": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "deploy"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef deploy(\n    image_path: str,\n    saved_folder: Input[Model],\n    project: str = \"adalfi-ai-poc-merchandizing\",\n    region: str = \"us-central1\",\n    machine_type: str = \"n1-standard-2\",\n    min_replica_count: int = 1,\n    max_replica_count: int = 2,\n    accelerator_type: str = \"NVIDIA_TESLA_T4\",\n    accelerator_count: int = 1,\n):\n    import logging\n    from google.cloud import aiplatform\n\n    aiplatform.init(project=project, location=region)\n    logging.basicConfig(level=logging.DEBUG)\n\n    CONTAINER_IMAGE_URI = image_path\n\n    existing_model = aiplatform.Model.list(\n        project=\"adalfi-ai-poc-merchandizing\", location=\"us-central1\"\n    )\n\n    if len(existing_model) != 0:\n        existing_model = existing_model[0].resource_name\n    else:\n        existing_model = None\n\n    uploaded_model = aiplatform.Model.upload(\n        parent_model=existing_model,\n        display_name=\"adalfi-ai-poc-merchandizing\",\n        artifact_uri=saved_folder.path,\n        serving_container_image_uri=CONTAINER_IMAGE_URI,\n        serving_container_predict_route=\"/predict\",\n        serving_container_health_route=\"/health\",\n    )\n\n    endpoint = aiplatform.Endpoint.create(\n        display_name=\"adalfi-ai-poc-merchandizing-endpoint\",\n        project=project,\n        location=region,\n    )\n\n    deploy_params = {\n        \"machine_type\": machine_type,\n        \"min_replica_count\": min_replica_count,\n        \"max_replica_count\": max_replica_count,\n        \"traffic_split\": {\"0\": 100},\n        \"deployed_model_display_name\": \"adalfi-ai-poc-merchandizing-deployment\",\n    }\n\n    # Add accelerator config if specified\n    if accelerator_type and accelerator_count > 0:\n        deploy_params[\"accelerator_type\"] = accelerator_type\n        deploy_params[\"accelerator_count\"] = accelerator_count\n\n    endpoint = aiplatform.Endpoint.list(project=project, location=region)[0]\n    uploaded_model.deploy(endpoint=endpoint, **deploy_params)\n\n    # undeploy traffic = 0 models\n    for model in endpoint.list_models():\n        if model.id not in endpoint.traffic_split:\n            endpoint.undeploy(deployed_model_id=model.id)\n    logging.info(f\"Model deployed successfully. Endpoint: {endpoint.resource_name}\")\n\n"
          ],
          "image": "us-central1-docker.pkg.dev/adalfi-ai-poc-merchandizing/component-container/libs:latest"
        }
      },
      "exec-evaluate": {
        "container": {
          "args": [
            "--type",
            "CustomJob",
            "--payload",
            "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"job_spec\": {\"worker_pool_specs\": {{$.inputs.parameters['worker_pool_specs']}}, \"scheduling\": {\"timeout\": \"{{$.inputs.parameters['timeout']}}\", \"restart_job_on_worker_restart\": {{$.inputs.parameters['restart_job_on_worker_restart']}}, \"strategy\": \"{{$.inputs.parameters['strategy']}}\"}, \"service_account\": \"{{$.inputs.parameters['service_account']}}\", \"tensorboard\": \"{{$.inputs.parameters['tensorboard']}}\", \"enable_web_access\": {{$.inputs.parameters['enable_web_access']}}, \"network\": \"{{$.inputs.parameters['network']}}\", \"reserved_ip_ranges\": {{$.inputs.parameters['reserved_ip_ranges']}}, \"base_output_directory\": {\"output_uri_prefix\": \"{{$.inputs.parameters['base_output_directory']}}\"}, \"persistent_resource_id\": \"{{$.inputs.parameters['persistent_resource_id']}}\"}, \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\": \"{{$.inputs.parameters['encryption_spec_key_name']}}\"}}",
            "--project",
            "{{$.inputs.parameters['project']}}",
            "--location",
            "{{$.inputs.parameters['location']}}",
            "--gcp_resources",
            "{{$.outputs.parameters['gcp_resources'].output_file}}"
          ],
          "command": [
            "python3",
            "-u",
            "-m",
            "google_cloud_pipeline_components.container.v1.custom_job.launcher"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.18.0"
        }
      },
      "exec-load-and-train": {
        "container": {
          "args": [
            "--type",
            "CustomJob",
            "--payload",
            "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"job_spec\": {\"worker_pool_specs\": {{$.inputs.parameters['worker_pool_specs']}}, \"scheduling\": {\"timeout\": \"{{$.inputs.parameters['timeout']}}\", \"restart_job_on_worker_restart\": {{$.inputs.parameters['restart_job_on_worker_restart']}}, \"strategy\": \"{{$.inputs.parameters['strategy']}}\"}, \"service_account\": \"{{$.inputs.parameters['service_account']}}\", \"tensorboard\": \"{{$.inputs.parameters['tensorboard']}}\", \"enable_web_access\": {{$.inputs.parameters['enable_web_access']}}, \"network\": \"{{$.inputs.parameters['network']}}\", \"reserved_ip_ranges\": {{$.inputs.parameters['reserved_ip_ranges']}}, \"base_output_directory\": {\"output_uri_prefix\": \"{{$.inputs.parameters['base_output_directory']}}\"}, \"persistent_resource_id\": \"{{$.inputs.parameters['persistent_resource_id']}}\"}, \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\": \"{{$.inputs.parameters['encryption_spec_key_name']}}\"}}",
            "--project",
            "{{$.inputs.parameters['project']}}",
            "--location",
            "{{$.inputs.parameters['location']}}",
            "--gcp_resources",
            "{{$.outputs.parameters['gcp_resources'].output_file}}"
          ],
          "command": [
            "python3",
            "-u",
            "-m",
            "google_cloud_pipeline_components.container.v1.custom_job.launcher"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.18.0"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "YOLOV11 Object Detection Model Training",
    "name": "adalfi-yolov11-pipe"
  },
  "root": {
    "dag": {
      "tasks": {
        "condition-1": {
          "componentRef": {
            "name": "comp-condition-1"
          },
          "dependentTasks": [
            "evaluate",
            "load-and-train"
          ],
          "inputs": {
            "artifacts": {
              "pipelinechannel--load-and-train-saved_folder": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "saved_folder",
                  "producerTask": "load-and-train"
                }
              }
            },
            "parameters": {
              "pipelinechannel--evaluate-deploy": {
                "taskOutputParameter": {
                  "outputParameterKey": "deploy",
                  "producerTask": "evaluate"
                }
              }
            }
          },
          "taskInfo": {
            "name": "mAP>85% & mAP50-95>50%"
          },
          "triggerPolicy": {
            "condition": "inputs.parameter_values['pipelinechannel--evaluate-deploy'] == 'true'"
          }
        },
        "evaluate": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-evaluate"
          },
          "dependentTasks": [
            "load-and-train"
          ],
          "inputs": {
            "artifacts": {
              "saved_models_gcs_folder": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "saved_folder",
                  "producerTask": "load-and-train"
                }
              }
            },
            "parameters": {
              "dataset_path": {
                "runtimeValue": {
                  "constant": "datasets"
                }
              },
              "gcs_data_folder": {
                "runtimeValue": {
                  "constant": "gs://tridorian-adalfi-poc-merchandizing/ultralytics-dataset"
                }
              }
            }
          },
          "taskInfo": {
            "name": "evaluate"
          }
        },
        "load-and-train": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-load-and-train"
          },
          "inputs": {
            "parameters": {
              "dataset_path": {
                "runtimeValue": {
                  "constant": "datasets"
                }
              },
              "epochs": {
                "runtimeValue": {
                  "constant": 1000.0
                }
              },
              "gcs_data_folder": {
                "runtimeValue": {
                  "constant": "gs://tridorian-adalfi-poc-merchandizing/ultralytics-dataset"
                }
              },
              "model_bucket": {
                "runtimeValue": {
                  "constant": "gs://adalfi_saved_models"
                }
              },
              "model_version": {
                "runtimeValue": {
                  "constant": "yolo11m.pt"
                }
              },
              "saved_path": {
                "runtimeValue": {
                  "constant": "yolo11m_batch_16_epochs_1000"
                }
              }
            }
          },
          "taskInfo": {
            "name": "load-and-train"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.10.1"
}